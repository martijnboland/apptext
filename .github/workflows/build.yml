# Build script from https://dusted.codes/github-actions-for-dotnet-core-nuget-packages. Many thanks!
name: .NET Core Build

on:
  push:
  pull_request:
  release:
    types:
      - published
env:
  # Stop wasting time caching packages
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  # Disable sending usage data to Microsoft
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  # GitHub Packages Feed settings 
  GITHUB_FEED: https://nuget.pkg.github.com/martijnboland/
  GITHUB_USER: martijnboland
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GITHUB_CONTAINER_REPO_TOKEN: ${{ secrets.GH_CONTAINER_REPO_TOKEN }}
  # Official NuGet Feed settings
  NUGET_FEED: https://api.nuget.org/v3/index.json
  NUGET_KEY: ${{ secrets.NUGET_KEY }}
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
    steps:
      - name: Set current date as env variable
        run: echo "NOW=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x
      - name: Setup Node.JS
        uses: actions/setup-node@v1
        with:
          node-version: 18
      - name: Install AppText.AdminApp client packages
        run: npm install
        working-directory: src/AppText.AdminApp/ClientApp
      - name: Restore
        run: dotnet restore
      - name: Build AppText.AdminApp JavaScript client
        run: npm run prod
        working-directory: src/AppText.AdminApp/ClientApp
      - name: Build
        run: dotnet build -c Release --no-restore
      - name: Test
        run: dotnet test -c Release
      - name: Pack
        if: matrix.os == 'ubuntu-latest'
        run: dotnet pack -v normal -c Release -o ./built-packages --no-restore --include-symbols --include-source -p:PackageVersion=$GITHUB_RUN_ID.0.0-$NOW
      - name: Upload Artifact
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v2
        with:
          name: nupkg
          path: ./built-packages/*.nupkg
  prerelease:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v1
        with:
          name: nupkg
      - name: Push to GitHub Feed
        run: |
          for f in ./nupkg/*.nupkg
          do
            curl -vX PUT -u "$GITHUB_USER:$GITHUB_TOKEN" -F package=@$f $GITHUB_FEED
          done
  deploy:
    needs: build
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set release version number
        id: releaseversion
        run: |
          VERSION=${{github.event.release.tag_name}}
          echo Version: $VERSION
          VERSION="${VERSION//v}"
          echo Clean Version: $VERSION
          echo "::set-output name=version::$VERSION"
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x
      - name: Setup Node.JS
        uses: actions/setup-node@v1
        with:
          node-version: 18
      - name: Install AppText.AdminApp client packages
        run: npm install
        working-directory: src/AppText.AdminApp/ClientApp
      - name: Build AppText.AdminApp JavaScript client
        run: npm run prod
        working-directory: src/AppText.AdminApp/ClientApp
      - name: Build Release NuGet package
        run: dotnet pack -c Release --include-symbols --include-source -p:Version=${{steps.releaseversion.outputs.version}} -o nupkg
      - name: Push to GitHub Feed
        run: |
          for f in ./nupkg/*.nupkg
          do
            curl -vX PUT -u "$GITHUB_USER:$GITHUB_TOKEN" -F package=@$f $GITHUB_FEED
          done
      - name: Push to NuGet Feed
        run: dotnet nuget push './nupkg/*.nupkg' --source $NUGET_FEED --skip-duplicate --api-key $NUGET_KEY
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            apptextio/apptext:latest
            apptextio/apptext:${{steps.releaseversion.outputs.version}}
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
